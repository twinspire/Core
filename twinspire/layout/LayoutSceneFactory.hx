/**
* Generated by Claude AI on 2025-08-12 and adapted for use
**/

package twinspire.layout;

import twinspire.scenes.SceneObject;
import twinspire.scenes.Scene;
import twinspire.render.GraphicsContext;
import twinspire.render.UpdateContext;
import twinspire.DimIndex;
import twinspire.Id;
import twinspire.geom.Dim;

/**
 * Factory for creating SceneObjects from layouts
 */
class LayoutSceneFactory {
    
    /**
     * Create a single SceneObject from a layout
     */
    public static function createSceneObject(layout:Layout, ctx:GraphicsContext, ?id:Id):LayoutSceneObject {
        var obj = new LayoutSceneObject(id);
        obj.initFromLayout(layout, ctx);
        return obj;
    }
    
    /**
     * Create multiple SceneObjects from a layout result, one for each named component
     */
    public static function createSceneObjects(layout:Layout, ctx:GraphicsContext):Array<LayoutSceneObject> {
        var result = layout.apply(ctx);
        var objects:Array<LayoutSceneObject> = [];
        
        // Create a main object for the entire layout
        var mainObj = new LayoutSceneObject();
        mainObj.layout = layout;
        mainObj.result = result;
        objects.push(mainObj);
        
        // Optionally create child objects for major components
        for (name => index in result.named) {
            if (name.indexOf("_") == -1) { // Only top-level names
                var childObj = new LayoutSceneObject();
                childObj.layout = layout;
                childObj.result = result;
                childObj.name = name;
                childObj.targetContainer = getDimensionFromIndex(ctx, result.indices[index]);
                objects.push(childObj);
            }
        }
        
        return objects;
    }
    
    private static function getDimensionFromIndex(ctx:GraphicsContext, index:DimIndex):Dim {
        return switch(index) {
            case Direct(i): ctx.dimensions[i];
            case Group(g): ctx.dimensions[ctx.getDimIndicesAtGroupIndex(g)[0]];
        };
    }
}