/**
* Generated by Claude AI on 2025-08-12 and adapted for use
**/

package twinspire.layout;

import twinspire.scenes.SceneObject;
import twinspire.scenes.Scene;
import twinspire.render.GraphicsContext;
import twinspire.render.UpdateContext;
import twinspire.DimIndex;
import twinspire.Id;
import twinspire.geom.Dim;

/**
 * SceneObject that contains layout information
 */
class LayoutSceneObject extends SceneObject {
    public var layout:Layout;
    public var result:LayoutResult;
    public var autoReapply:Bool = true;
    
    /**
     * Cached references for quick access in update/render
     */
    private var cachedRefs:Map<String, DimIndex>;
    
    public function new(?id:Id) {
        super();
        this.type = id ?? Id.None;
        cachedRefs = [];
    }
    
    /**
     * Initialize from an existing layout
     */
    public function initFromLayout(layout:Layout, ctx:GraphicsContext):LayoutResult {
        this.layout = layout;
        this.result = layout.apply(ctx);
        updateCachedRefs();
        return result;
    }
    
    /**
     * Get a dimension index by name (cached for performance)
     */
    public function getRef(name:String):DimIndex {
        if (!cachedRefs.exists(name) && result != null) {
            cachedRefs[name] = result.get(name);
        }
        return cachedRefs[name];
    }
    
    /**
     * Reapply layout after modifications
     */
    public function reapply(ctx:GraphicsContext):LayoutResult {
        if (layout != null) {
            result = layout.apply(ctx, result);
            updateCachedRefs();
        }
        return result;
    }
    
    /**
     * Update cached references after reapply
     */
    private function updateCachedRefs() {
        // Clear and rebuild cache
        for (key in cachedRefs.keys()) {
            cachedRefs[key] = result.get(key);
        }
    }
    
    /**
     * Mark that layout needs reapplying
     */
    public function markDirty() {
        if (autoReapply) {
            var ctx = Application.instance.graphicsCtx;
            reapply(ctx);
        }
    }
}